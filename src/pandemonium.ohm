Pandemonium { 
    Program     = Statement+
    Block       = "{" Statement+ "}"
    Statement   = Declaration                         
                | nope ";"                                      -- nope
                | yeet Exp ";"                                  -- yeet
                | print "(" Exp ")" ";"                         -- print
                | while "(" Exp ")" Block                       -- while
                | ProcCall                                  
                | ForLoop
                | IfThen
                | Assignment ";"                                -- assignment
    Type        = numType | bool | stringType | id                   
                | "[" Type "]"                                  -- list
    Variable    = Variable "[" Exp ":" Exp "]"                  -- slice
                | Variable "[" Exp "]"                          -- subscript
                | (Variable | this) "." Exp                     -- memberaccess
                | new id "(" Args ")"                           -- instantiation
                | "<-" Variable                                 -- unpacking
                | ListExp
                | id
    Declaration = Vardec | Subrtdec | StructDec | ClassDec
    Vardec      = now VarDecId ":" Type "=" Exp ";"             -- mutable
                | set VarDecId ":" Type "=" Exp ";"	            -- immutable
    Subrtdec    = Type id "(" Params ")" Block                  -- function
                | proc id "(" Params ")" Block                  -- procedure
    Assignment  = Increment
                | Decrement                                     
                | Variable "=" Exp                              -- base
                | Variable "+=" Exp                             -- add
                | Variable "-=" Exp                             -- sub
    Increment   = "++" Variable                                 -- prefix
                | Variable "++"                                 -- postfix
    Decrement   = "--" Variable                                 -- prefix
                | Variable "--"                                 -- postfix
    ForLoop     = for "(" Vardec id in Variable ")" Block       -- elementwise
                | for "(" Vardec Exp ";" Exp ")" Block          -- incremental
    IfThen      = if "(" Exp ")" Block ElseIf                   -- complex
                | if "(" Exp ")" Block                          -- simple
    ElseIf      = elif "(" Exp ")" Block ElseIf                 -- complex
                | elif "(" Exp ")" Block                        -- simple
                | ThenElse                                      
    ThenElse    = else Block
    StructDec   = struct id ObjectBlock
    ClassDec    = class id ObjectBlock
    ObjectBlock = "{" (VisibilityLabel | InstanceField | Subrtdec)+ "}"
    VisibilityLabel = (public | private) ":"
    InstanceField = id ";"


    Exp         = Exp "or" Exp2                                 -- binary
                | Exp2
    Exp2        = Exp2 "and" Exp3                               -- binary
                | Exp3
    Exp3        = Exp4 ("=="|"!=") Exp4                         -- binary
                | Exp4
    Exp4        = Exp5 ("<="|"<"|"C<"|"C="|in|is|">="|">") Exp5 -- binary
                | Exp5
    Exp5        = Exp5 ("+" | "-") Exp6                         -- binary
                | Exp6
    Exp6        = Exp6 ("*"|"//"|"/"|"%") Exp7                  -- binary
                | Exp7
    Exp7        = Exp8 ("^") Exp7                               -- binary
                | Exp8
    Exp8        = ("++" | "--" | "!" | "-") Exp9                -- unary
                | Exp9
    Exp9        = Exp10 ("++" | "--")                           -- unary
                | Exp10
    Exp10       = num
                | true
                | false
                | TemplateLiteral
                | str
                | FuncCall
                | ListExp
                | Variable
                | Lambda
                | "(" Exp ")"                                   -- grouping
    
    ListExp     = "[" Args "]"
    FuncCall    = VarName "(" Args ")"
    ProcCall    = VarName "(" Args ")" ";"
    VarName     = VarName1 "." VarName                          -- memberaccess
                | id
    VarName1    = VarName "[" Exp "]"                           -- listaccess
                | this
                | id                             
    
    VarDecId    = this "." id                                   -- instance
                | id

    Lambda      = "(" Params ")" "->" (Exp | Block)             -- base
                | "(" Params ")" "[" Captures "]" "->" (Exp | Block)    -- capturing
    
    Params      = ListOf<Param, ",">
    Args        = ListOf<Exp, ",">
    Captures    = ListOf<Variable, ",">
    Param       = Type id

    idchar      = "_" | alnum
    now         = "now" ~idchar
    set         = "set" ~idchar
    true        = "true" ~idchar
    false       = "false" ~idchar
    numType     = "num" ~idchar
    bool        = "bool" ~idchar
    stringType  = "string" ~idchar
    proc        = "proc" ~idchar
    for         = "for" ~idchar
    while       = "while" ~idchar
    if          = "if" ~idchar
    elif        = "elif" ~idchar
    else        = "else" ~idchar
    yeet        = "yeet" ~idchar
    nope        = "nope" ~idchar
    print       = "print" ~idchar
    in          = "in" ~idchar
    is          = "is" ~idchar
    struct      = "struct" ~idchar
    class       = "class" ~idchar
    public      = "public" ~idchar
    private     = "private" ~idchar
    new         = "new" ~idchar
    this        = "this" ~idchar

    str         = strDelimiter (~strDelimiter ~"\n" any)* strDelimiter
    strDelimiter = "\""

    templateLiteralDelimiter = "`"
    TemplateLiteral     = templateLiteralDelimiter TemplateLiteralStmt+ templateLiteralDelimiter
    TemplateLiteralStmt = ~templateLiteralDelimiter "#{" Exp "}" -- expression
                        | ~templateLiteralDelimiter any (~"#{" ~templateLiteralDelimiter any)* -- str
    
    id          = ~keyword letter idchar*
    keyword     = now | set | true | false | numType | bool 
                | stringType | proc | for | while | if | else 
                | for | while | if | elif | else | yeet | nope 
                | print | in | is | struct | class | public
                | private | new | this
    num         = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
    space       += "$" (~"\n" any)* ("\n" | end)                -- comment
}